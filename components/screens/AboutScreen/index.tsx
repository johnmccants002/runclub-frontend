import { Colors } from "@/constants/Colors";
import axios from "@/middleware/axios";
import useAuthStore from "@/stores/auth";
import { Ionicons } from "@expo/vector-icons";
import { useRouter } from "expo-router";
import React, { useEffect, useState } from "react";
import QRCode from "react-native-qrcode-svg";

export interface User {
  _id?: string; // Optional, because it's auto-generated by MongoDB
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  profile?: {
    instagram?: string;
    phoneNumber?: string;
    favoriteBrunchSpot?: string;
    about?: string;
  };
  membershipStatus: "pending" | "accepted" | "denied"; // Enum values for membership status
  tosAccepted: boolean; // Boolean field for TOS acceptance
  emailList: boolean; // Boolean field for email list subscription
  createdAt?: Date; // Optional as it's auto-generated
  updatedAt?: Date; // Optional as it's auto-generated
  isAdmin: boolean; // Boolean field for admin status
  qrCode?: string; // Optional QR code field
}

import { BASE_URL } from "@/constants";
import { FlatList, Pressable, StyleSheet, Text, View } from "react-native";

const DATA = [
  {
    id: "1",
    title: "Contact Us",
    icon: "call-outline",
    route: "/about/contact",
  },
  {
    id: "2",
    title: "About Us",
    icon: "information-circle-outline",
    route: "/about/aboutus",
  },

  {
    id: "6",
    title: "Settings",
    icon: "settings-outline",
    route: "/about/settings",
  },
  {
    id: "7",
    title: "Gallery",
    icon: "images-outline",
    route: "/about/gallery",
  },
];

export default function AboutSectionScreen() {
  const router = useRouter();

  const [loading, setLoading] = useState(false);
  const user = useAuthStore((state) => state.user);
  const token = useAuthStore.getState().token; // Get the token from the auth store

  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [qrCode, setQrCode] = useState(null);

  useEffect(() => {
    const fetchCurrentUser = async () => {
      setLoading(true);
      try {
        if (!user?.userId) {
          console.warn("No valid userId found");
          return;
        }

        const response = await axios.get(`${BASE_URL}/users/${user.userId}`, {
          headers: {
            Authorization: `Bearer ${token}`, // Include the token in the header
          },
        });

        console.log(response.data?.qrCode);
        setCurrentUser(response.data);
      } catch (error) {
        console.error("Error fetching current user:", error);
      } finally {
        setLoading(false);
      }
    };

    if (user?.userId) {
      fetchCurrentUser();
    }
  }, [user?.userId]); // Ensure that the effect runs only when `userId` changes

  const renderItem = ({ item }) => (
    <Pressable
      style={styles.itemContainer}
      onPress={() => router.push(item.route)}
    >
      <View style={styles.leftContainer}>
        <Ionicons name={item.icon} size={24} color="#333" />
        <Text style={styles.itemText}>{item.title}</Text>
      </View>
      <Ionicons name="chevron-forward-outline" size={24} color="#333" />
    </Pressable>
  );

  return (
    <View style={styles.container}>
      {/* Header Image */}
      <View style={styles.backgroundCover}></View>

      <View style={styles.header}>
        {currentUser?.membershipStatus === "accepted" && loading !== true ? (
          <QRCode value={currentUser?._id} size={200} />
        ) : (
          <View
            style={{
              width: 200,
              height: 200,
              backgroundColor: "white",
              alignItems: "center",
              justifyContent: "center",
            }}
          >
            <Text style={styles.text}>
              Your QR Code will be right here when you get accepted.
            </Text>
          </View>
        )}
        <View style={styles.info}>
          <View style={styles.infoDescription}>
            <Text style={styles.numberText}>
              {currentUser?.firstName} {currentUser?.lastName}
            </Text>
            <Text style={styles.numberText}></Text>
          </View>
        </View>
      </View>

      <FlatList
        data={DATA}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        contentContainerStyle={styles.listContent}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#f0f0f0",
    justifyContent: "flex-start",
    alignItems: "center",
    paddingTop: 120,
  },
  headerImage: {
    width: "100%",
    height: 200,
    resizeMode: "cover",
  },
  listContent: {
    paddingTop: 16,
  },
  text: {
    fontSize: 16,
    fontWeight: "semibold",
    color: "#333",
    textAlign: "center",
  },
  itemContainer: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingVertical: 16,
    paddingHorizontal: 20,
    backgroundColor: "#fff",
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
    width: "100%",
  },
  leftContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  itemText: {
    fontSize: 16,
    marginLeft: 10,
    color: "#333",
  },
  avatar: {
    width: 160,
    height: 160,
    borderRadius: 80,
  },
  header: {
    flexDirection: "column",
    alignItems: "center",
    gap: 4,
    height: 300,
  },
  info: {
    flexDirection: "row",
    justifyContent: "center",
    gap: 20,
    marginVertical: 10,
  },
  infoDescription: {
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
  },
  numberText: {
    fontSize: 18,
    color: "black",
  },
  blurContainer: {
    position: "absolute",
    left: 0,
    right: 0,
    height: 400,
    top: 0,
  },
  backgroundCover: {
    position: "absolute",
    left: 0,
    height: 200,
    right: 0,
    top: 0,
    backgroundColor: Colors.primary.gray,
    borderBottomLeftRadius: 8,
    borderBottomRightRadius: 8,
  },
});
